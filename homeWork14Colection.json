{
	"info": {
		"_postman_id": "5a43d1b2-0d68-4ae9-b08d-31ac8afb569e",
		"name": "QA Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34786537"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let bodydata = JSON.parse(pm.request.body)\r",
							"pm.collectionVariables.set('userPassword', bodydata.password)\r",
							"pm.collectionVariables.set('userEmail', bodydata.email)\r",
							"pm.test(\"name is valid\", function () {\r",
							"    pm.expect(/^[a-zA-Zа-яА-Я]+$/.test(bodydata.name)).to.be.true\r",
							"})\r",
							"pm.test(\"last name is valid\", function () {\r",
							"    pm.expect(/^[a-zA-Zа-яА-Я]+$/.test(bodydata.lastName)).to.be.true\r",
							"})\r",
							"pm.test(\"email is valid\", function () {\r",
							"    pm.expect(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(bodydata.email)).to.be.true\r",
							"})\r",
							"pm.test(\"password is valid\", function () {\r",
							"    pm.expect(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,15}$/.test(bodydata.password)).to.be.true\r",
							"})\r",
							"pm.test(\"repeatPassword is valid\", function () {\r",
							"    pm.expect(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,15}$/.test(bodydata.repeatPassword)).to.be.true\r",
							"})\r",
							"\r",
							"// Перевірка чи є дані в відповіді\r",
							"if (pm.response.json().data) {\r",
							"    // Перевірка наявності поля photoFilename та перевірка на null або undefined\r",
							"    pm.test(\"photoFilename field is not empty\", function () {\r",
							"        pm.expect(pm.response.json().data.photoFilename).to.not.be.oneOf([null, undefined]);\r",
							"    });\r",
							"\r",
							"    // Перевірка наявності поля distanceUnits та перевірка на null або undefined\r",
							"    pm.test(\"distanceUnits field is not empty\", function () {\r",
							"        pm.expect(pm.response.json().data.distanceUnits).to.not.be.oneOf([null, undefined]);\r",
							"    });\r",
							"\r",
							"    // Перевірка наявності поля currency та перевірка на null або undefined\r",
							"    pm.test(\"currency field is not empty\", function () {\r",
							"        pm.expect(pm.response.json().data.currency).to.not.be.oneOf([null, undefined]);\r",
							"    });\r",
							"    pm.collectionVariables.set('userId', pm.response.json().data.userId)\r",
							"\r",
							"    pm.test(\"userId field is not empty\", function () {\r",
							"        pm.expect(pm.response.json().data.userId).to.not.be.oneOf([null, undefined]);\r",
							"    });\r",
							"    pm.test(\"photoFilename field is not empty\", function () {\r",
							"        pm.expect(pm.response.json().data.photoFilename).to.not.be.empty;\r",
							"    });\r",
							"\r",
							"    pm.test(\"distanceUnits field is not empty\", function () {\r",
							"        pm.expect(pm.response.json().data.distanceUnits).to.not.be.empty;\r",
							"    });\r",
							"    pm.test(\"currency field is not empty\", function () {\r",
							"        pm.expect(pm.response.json().data.currency).to.not.be.empty;\r",
							"    });\r",
							"    pm.test(\"Response schema is valid\", function () {\r",
							"        var schema = {\r",
							"            type: \"object\",\r",
							"            properties: {\r",
							"                status: {\r",
							"                    type: \"string\"\r",
							"                },\r",
							"                data: {\r",
							"                    type: \"object\",\r",
							"                    properties: {\r",
							"                        userId: {\r",
							"                            type: \"number\"\r",
							"                        },\r",
							"                        photoFilename: {\r",
							"                            type: \"string\"\r",
							"                        },\r",
							"                        distanceUnits: {\r",
							"                            type: \"string\"\r",
							"                        },\r",
							"                        currency: {\r",
							"                            type: \"string\"\r",
							"                        }\r",
							"                    },\r",
							"                    required: [\"userId\", \"photoFilename\", \"distanceUnits\", \"currency\"]\r",
							"                }\r",
							"            },\r",
							"            required: [\"status\", \"data\"]\r",
							"        };\r",
							"\r",
							"        var response = pm.response.json();\r",
							"        pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"    });\r",
							"}\r",
							"pm.test(\"status 201\", function () {\r",
							"    pm.response.to.have.status(201)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{repeatPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/auth/signup",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change Profile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let bodyRequest = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"status 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"check image\", function(){\r",
							"    pm.expect(/(?:\\D|\\d)+\\.(?:jpg|jpeg|png|gif|bmp)/.test(bodyRequest.photo)).to.be.true\r",
							"})\r",
							"pm.test(\"name is valid\", function () {\r",
							"    pm.expect(/^[a-zA-Zа-яА-Я]+$/.test(bodyRequest.name)).to.be.true\r",
							"})\r",
							"pm.test(\"last name is valid\", function () {\r",
							"    pm.expect(/^[a-zA-Zа-яА-Я]+$/.test(bodyRequest.lastName)).to.be.true\r",
							"})\r",
							"pm.test(\"dateBirth is valid\", function () {\r",
							"    pm.expect(/^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(\\d{4})$/.test(bodyRequest.dateBirth)).to.be.true\r",
							"})\r",
							"pm.test(\"Validate country field\", function () {\r",
							"    let supportedCountries = [\"USA\", \"Canada\", \"UK\", \"Germany\", \"France\"];\r",
							"    pm.expect(supportedCountries).to.include(bodyRequest.country);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"photo\": \"{{photo}}\",\r\n  \"name\": \"{{newName}}\",\r\n  \"lastName\": \"{{newLastName}}\",\r\n  \"dateBirth\": \"{{dateBirth}}\",\r\n  \"country\": \"{{country}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/profile",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change Password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отримання значення паролю з тіла запиту та збереження його в колекційній змінній, щоб використовувати в login\r",
							"let password = JSON.parse(pm.request.body.raw).password;\r",
							"let repeatPassword = JSON.parse(pm.request.body.raw).repeatPassword;\r",
							"pm.collectionVariables.set('userPassword', password);\r",
							"\r",
							"// Отримання значення userId, збереженого раніше в середовищі Postman\r",
							"let userId = pm.collectionVariables.get('userId');\r",
							"\r",
							"pm.test(\"status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Password updated successfully\", function () {\r",
							"    pm.expect(pm.response.json().data.userId).to.eql(userId);\r",
							"});\r",
							"pm.test(\"Password is the same\", function(){\r",
							"    pm.expect(password).to.equal(repeatPassword)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"oldPassword\": \"{{userPassword}}\",\r\n  \"password\": \"{{newUserPassword}}\",\r\n  \"repeatPassword\": \"{{newUserRepeatPassword}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/auth/logout",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"auth",
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "oldPassword",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "userPassword",
			"value": ""
		},
		{
			"key": "newUserPassword",
			"value": ""
		},
		{
			"key": "carId",
			"value": ""
		},
		{
			"key": "reportedAt",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "initialMileage",
			"value": ""
		}
	]
}